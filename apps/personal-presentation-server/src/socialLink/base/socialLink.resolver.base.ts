/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SocialLink } from "./SocialLink";
import { SocialLinkCountArgs } from "./SocialLinkCountArgs";
import { SocialLinkFindManyArgs } from "./SocialLinkFindManyArgs";
import { SocialLinkFindUniqueArgs } from "./SocialLinkFindUniqueArgs";
import { CreateSocialLinkArgs } from "./CreateSocialLinkArgs";
import { UpdateSocialLinkArgs } from "./UpdateSocialLinkArgs";
import { DeleteSocialLinkArgs } from "./DeleteSocialLinkArgs";
import { UserProfile } from "../../userProfile/base/UserProfile";
import { SocialLinkService } from "../socialLink.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SocialLink)
export class SocialLinkResolverBase {
  constructor(
    protected readonly service: SocialLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "read",
    possession: "any",
  })
  async _socialLinksMeta(
    @graphql.Args() args: SocialLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SocialLink])
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "read",
    possession: "any",
  })
  async socialLinks(
    @graphql.Args() args: SocialLinkFindManyArgs
  ): Promise<SocialLink[]> {
    return this.service.socialLinks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SocialLink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "read",
    possession: "own",
  })
  async socialLink(
    @graphql.Args() args: SocialLinkFindUniqueArgs
  ): Promise<SocialLink | null> {
    const result = await this.service.socialLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SocialLink)
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "create",
    possession: "any",
  })
  async createSocialLink(
    @graphql.Args() args: CreateSocialLinkArgs
  ): Promise<SocialLink> {
    return await this.service.createSocialLink({
      ...args,
      data: {
        ...args.data,

        userProfile: args.data.userProfile
          ? {
              connect: args.data.userProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SocialLink)
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "update",
    possession: "any",
  })
  async updateSocialLink(
    @graphql.Args() args: UpdateSocialLinkArgs
  ): Promise<SocialLink | null> {
    try {
      return await this.service.updateSocialLink({
        ...args,
        data: {
          ...args.data,

          userProfile: args.data.userProfile
            ? {
                connect: args.data.userProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SocialLink)
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "delete",
    possession: "any",
  })
  async deleteSocialLink(
    @graphql.Args() args: DeleteSocialLinkArgs
  ): Promise<SocialLink | null> {
    try {
      return await this.service.deleteSocialLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => UserProfile, {
    nullable: true,
    name: "userProfile",
  })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  async getUserProfile(
    @graphql.Parent() parent: SocialLink
  ): Promise<UserProfile | null> {
    const result = await this.service.getUserProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
