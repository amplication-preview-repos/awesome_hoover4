/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SocialLinkService } from "../socialLink.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SocialLinkCreateInput } from "./SocialLinkCreateInput";
import { SocialLink } from "./SocialLink";
import { SocialLinkFindManyArgs } from "./SocialLinkFindManyArgs";
import { SocialLinkWhereUniqueInput } from "./SocialLinkWhereUniqueInput";
import { SocialLinkUpdateInput } from "./SocialLinkUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SocialLinkControllerBase {
  constructor(
    protected readonly service: SocialLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SocialLink })
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSocialLink(
    @common.Body() data: SocialLinkCreateInput
  ): Promise<SocialLink> {
    return await this.service.createSocialLink({
      data: {
        ...data,

        userProfile: data.userProfile
          ? {
              connect: data.userProfile,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        platform: true,
        updatedAt: true,
        url: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SocialLink] })
  @ApiNestedQuery(SocialLinkFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async socialLinks(@common.Req() request: Request): Promise<SocialLink[]> {
    const args = plainToClass(SocialLinkFindManyArgs, request.query);
    return this.service.socialLinks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        platform: true,
        updatedAt: true,
        url: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SocialLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async socialLink(
    @common.Param() params: SocialLinkWhereUniqueInput
  ): Promise<SocialLink | null> {
    const result = await this.service.socialLink({
      where: params,
      select: {
        createdAt: true,
        id: true,
        platform: true,
        updatedAt: true,
        url: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SocialLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSocialLink(
    @common.Param() params: SocialLinkWhereUniqueInput,
    @common.Body() data: SocialLinkUpdateInput
  ): Promise<SocialLink | null> {
    try {
      return await this.service.updateSocialLink({
        where: params,
        data: {
          ...data,

          userProfile: data.userProfile
            ? {
                connect: data.userProfile,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          platform: true,
          updatedAt: true,
          url: true,

          userProfile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SocialLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSocialLink(
    @common.Param() params: SocialLinkWhereUniqueInput
  ): Promise<SocialLink | null> {
    try {
      return await this.service.deleteSocialLink({
        where: params,
        select: {
          createdAt: true,
          id: true,
          platform: true,
          updatedAt: true,
          url: true,

          userProfile: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
