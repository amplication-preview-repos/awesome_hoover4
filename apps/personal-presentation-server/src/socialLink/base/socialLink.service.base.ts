/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SocialLink as PrismaSocialLink,
  UserProfile as PrismaUserProfile,
} from "@prisma/client";

export class SocialLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SocialLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.socialLink.count(args);
  }

  async socialLinks<T extends Prisma.SocialLinkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialLinkFindManyArgs>
  ): Promise<PrismaSocialLink[]> {
    return this.prisma.socialLink.findMany<Prisma.SocialLinkFindManyArgs>(args);
  }
  async socialLink<T extends Prisma.SocialLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialLinkFindUniqueArgs>
  ): Promise<PrismaSocialLink | null> {
    return this.prisma.socialLink.findUnique(args);
  }
  async createSocialLink<T extends Prisma.SocialLinkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialLinkCreateArgs>
  ): Promise<PrismaSocialLink> {
    return this.prisma.socialLink.create<T>(args);
  }
  async updateSocialLink<T extends Prisma.SocialLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialLinkUpdateArgs>
  ): Promise<PrismaSocialLink> {
    return this.prisma.socialLink.update<T>(args);
  }
  async deleteSocialLink<T extends Prisma.SocialLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SocialLinkDeleteArgs>
  ): Promise<PrismaSocialLink> {
    return this.prisma.socialLink.delete(args);
  }

  async getUserProfile(parentId: string): Promise<PrismaUserProfile | null> {
    return this.prisma.socialLink
      .findUnique({
        where: { id: parentId },
      })
      .userProfile();
  }
}
