/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserProfileService } from "../userProfile.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserProfileCreateInput } from "./UserProfileCreateInput";
import { UserProfile } from "./UserProfile";
import { UserProfileFindManyArgs } from "./UserProfileFindManyArgs";
import { UserProfileWhereUniqueInput } from "./UserProfileWhereUniqueInput";
import { UserProfileUpdateInput } from "./UserProfileUpdateInput";
import { ExperienceFindManyArgs } from "../../experience/base/ExperienceFindManyArgs";
import { Experience } from "../../experience/base/Experience";
import { ExperienceWhereUniqueInput } from "../../experience/base/ExperienceWhereUniqueInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";
import { SocialLinkFindManyArgs } from "../../socialLink/base/SocialLinkFindManyArgs";
import { SocialLink } from "../../socialLink/base/SocialLink";
import { SocialLinkWhereUniqueInput } from "../../socialLink/base/SocialLinkWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserProfileControllerBase {
  constructor(
    protected readonly service: UserProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserProfile })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserProfile(
    @common.Body() data: UserProfileCreateInput
  ): Promise<UserProfile> {
    return await this.service.createUserProfile({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phone: true,
        photo: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserProfile] })
  @ApiNestedQuery(UserProfileFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userProfiles(@common.Req() request: Request): Promise<UserProfile[]> {
    const args = plainToClass(UserProfileFindManyArgs, request.query);
    return this.service.userProfiles({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phone: true,
        photo: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    const result = await this.service.userProfile({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phone: true,
        photo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() data: UserProfileUpdateInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.updateUserProfile({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          phone: true,
          photo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserProfile(
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<UserProfile | null> {
    try {
      return await this.service.deleteUserProfile({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          phone: true,
          photo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/experiences")
  @ApiNestedQuery(ExperienceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Experience",
    action: "read",
    possession: "any",
  })
  async findExperiences(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Experience[]> {
    const query = plainToClass(ExperienceFindManyArgs, request.query);
    const results = await this.service.findExperiences(params.id, {
      ...query,
      select: {
        company: true,
        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        startDate: true,
        title: true,
        updatedAt: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectExperiences(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateExperiences(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/experiences")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectExperiences(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ExperienceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiences: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectProjects(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateProjects(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectProjects(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/socialLinks")
  @ApiNestedQuery(SocialLinkFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SocialLink",
    action: "read",
    possession: "any",
  })
  async findSocialLinks(
    @common.Req() request: Request,
    @common.Param() params: UserProfileWhereUniqueInput
  ): Promise<SocialLink[]> {
    const query = plainToClass(SocialLinkFindManyArgs, request.query);
    const results = await this.service.findSocialLinks(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        platform: true,
        updatedAt: true,
        url: true,

        userProfile: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/socialLinks")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async connectSocialLinks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SocialLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      socialLinks: {
        connect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/socialLinks")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async updateSocialLinks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SocialLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      socialLinks: {
        set: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/socialLinks")
  @nestAccessControl.UseRoles({
    resource: "UserProfile",
    action: "update",
    possession: "any",
  })
  async disconnectSocialLinks(
    @common.Param() params: UserProfileWhereUniqueInput,
    @common.Body() body: SocialLinkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      socialLinks: {
        disconnect: body,
      },
    };
    await this.service.updateUserProfile({
      where: params,
      data,
      select: { id: true },
    });
  }
}
